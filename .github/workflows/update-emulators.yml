name: Update emulators

on:
  # TODO: enable schedule
  # schedule:
  #   # Run the first day of the month at a (more or less) random time
  #   - cron: '31 6 1 * *'

  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  update-emulators:
    runs-on: ubuntu-latest

    env:
      # TODO: build multiple cores; see https://docs.libretro.com/development/retroarch/compilation/3ds/#building-retroarch-in-bulk
      CORE_NAME: fceumm
      ROMFS_DIR: pkg/ctr/build/romfs

    steps:
      # TODO: store the latest version somewhere and determine whether a build is even necessary
      - name: Get latest version of RetroArch
        run: echo "RETROARCH_LATEST_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/libretro/RetroArch.git | tail -n 1 | cut -d / -f 3)" >> $GITHUB_ENV

      - name: Fetch libretro-super
        run: git clone --depth 1 https://github.com/libretro/libretro-super.git

      - name: Fetch core
        run: |
          cd libretro-super
          ./libretro-fetch.sh --shallow "$CORE_NAME"

      # Fetch RetroArch manually instead of using libretro-fetch.sh so that we can fetch the latest stable tag
      - name: Fetch RetroArch and dependencies
        run: |
          cd libretro-super
          git clone --depth=1 -b "$RETROARCH_LATEST_VERSION" https://github.com/libretro/RetroArch.git retroarch
          cd retroarch
          # From libretro-super/rules.d/player-rules.sh
          ./fetch-submodules.sh

      - name: Build core library
        run: |
          cd libretro-super
          docker run --rm -v "$PWD:/build" devkitpro/devkitarm sh -c "cd /build; ./libretro-build-ctr.sh $CORE_NAME"

      - name: Patch RetroArch
        run: |
          cd libretro-super/retroarch
          # Mount the RomFS at romfs:/ and override the default location of retroarch.cfg
          sed -i 's/FILE_PATH_MAIN_CONFIG\(.*\)/FILE_PATH_MAIN_CONFIG\1\n\n   romfsInit();\n   strncpy(g_defaults.path_config, "romfs:\/retroarch.cfg", sizeof(g_defaults.path_config));/' frontend/drivers/platform_ctr.c
          # Make sure RomFS gets included in the core CIA
          sed -i "s@TitleInfo:@RomFs:\n  RootPath                : $ROMFS_DIR\n\nTitleInfo:@"  pkg/ctr/tools/template.rsf
          # Load the ROM at romfs:/rom.bin by default
          sed -i '0,/wrap_args->content_path\s.*=\s.*NULL/{s//wrap_args->content_path   = strdup("romfs:\/rom\.bin")/}' tasks/task_content.c
          sed -i 's/wrap_args->touched\s.*=\s.*false/wrap_args->touched        = true/' tasks/task_content.c

      - name: Set up RomFS
        run: |
          cd libretro-super/retroarch
          mkdir -p "$ROMFS_DIR"
          cp -r ../../emulators/romfs/. "$ROMFS_DIR"/
          # This allows RetroArch run from a standalone CIA core to have a core path; the
          # path here will be overridden by config_file_salamander_get_path() if I'm
          # remembering correctly :P
          echo "libretro_path = \"sdmc:/retroarch/cores/${CORE_NAME}_libretro.cia\"" > "$ROMFS_DIR"/retroarch-salamander.cfg
          # Create a dummy rom.bin file
          echo -n "nopi" > "$ROMFS_DIR"/rom.bin
          # The core path is looked up as part of the logic for matching it with the core
          # info, so we bundle a dummy core to work around it
          mkdir -p "$ROMFS_DIR/cores"
          touch "$ROMFS_DIR/cores/${CORE_NAME}_libretro.cia"
          # RetroArch since 1.9.3 (commit 50d27fad) won't allow loading games without the
          # info file, and even if that's hacked around, save states won't work without
          # the info file since 1.10.1 (commit 42e03cae), so we need to bundle the info
          # file as well
          mkdir -p "$ROMFS_DIR/info"
          touch "$ROMFS_DIR/info/${CORE_NAME}_libretro.info"

      - name: Copy assets
        run: |
          cd libretro-super/retroarch
          mkdir -p "$ROMFS_DIR/assets/ctr"
          cp media/assets/ctr/bottom_menu.png "$ROMFS_DIR/assets/ctr"

      - name: Build core library
        run: |
          cd libretro-super
          docker run --rm -v "$PWD:/build" devkitpro/devkitarm sh -c "cd /build; ./libretro-build-ctr.sh $CORE_NAME"

      - name: Build standalone core
        run: |
          cd libretro-super/retroarch
          cp "../dist/ctr/${CORE_NAME}_libretro_ctr.a" libretro_ctr.a
          docker run --rm -v "$PWD:/build" --network=host devkitpro/devkitarm sh -c "cd /build; make -f Makefile.ctr USE_CTRULIB_2=1"
          mv retroarch_3ds.cia "../../emulators/${CORE_NAME}_libretro.cia"
          git add "../../emulators/${CORE_NAME}_libretro.cia"

      - name: Push updated cores to Git
        run: |
          # https://github.community/t/github-actions-bot-email-address/17204/5
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Update cores" || exit 0
          git push

# TODO
# - use core-specific banner
